A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).

we can say A closure allows inner functions to access the outer scope of a function.

eg:- 
function init() {
  var name = "Mozilla"; // name is a local variable created by init
  function displayName() {
    // displayName() is the inner function, that forms the closure
    console.log(name); // use variable declared in the parent function
  }
  displayName();
}
init();

init() creates a local variable called name and a function called displayName(). The displayName() function is an inner function that is defined inside init() and is available only within the body of the init() function. Note that the displayName() function has no local variables of its own. However, since inner functions have access to the variables of outer functions, displayName() can access the variable name declared in the parent function, init().

------------
2)
A JavaScript callback is a function which is to be executed after another function has finished execution

A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.



-------------------

let arr = [1,1,3,4,5,6,6];
let temp = [];
for(let i =0;i<arr.length;i++){
  let isCheck = true;
  for(let j = 0; j<temp.length;j++){
    if(temp[j] == temp[i]){
      isCheck = false;
      break;
    }
  }
  if(isCheck){
    temp.push(arr[i]);
  }
}
console.log(temp);